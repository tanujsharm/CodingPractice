// Linked List

//recursive
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(l1==NULL)
            return l2;
        if(l2==NULL)
            return l1;
        if(l1->val <= l2->val){
            l1->next=mergeTwoLists(l1->next,l2);
            return l1;
        }
        else{
            l2->next=mergeTwoLists(l1,l2->next);
                return l2;
        }
    }
};

//iterative


class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(l1==NULL)
            return l2;
        if(l2==NULL)
            return l1;
        
        ListNode *ans,*tail;
        if(l1->val < l2->val){
            ans=l1;
            tail=l1;
            l1=l1->next;
        }
        else
        {
            ans=l2;
            tail=l2;
            l2=l2->next;
        }
        
        while(l1!=NULL && l2!=NULL){
            if(l1->val < l2->val){
                tail->next=l1;
                tail=l1;
                l1=l1->next;
            }
            else{
                
                tail->next=l2;
                tail=l2;
                l2=l2->next;
            }
        }
        if(l1==NULL)tail->next=l2;
        else tail->next=l1;
        return ans;
        
    }
};


//This approach is from takeuforward and this is pretty neat
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(!l1 && !l2)
            return nullptr;
        if(!l1)
            return l2;
        if(!l2)
            return l1;
        
        if(l1->val > l2->val) std::swap(l1,l2);
        ListNode* res=l1;
        while(l1!=NULL && l2!=NULL){
            ListNode* temp=NULL;
        while(l1!=NULL && l1->val <= l2->val){
                temp=l1;
                l1=l1->next;
            }
            temp->next=l2;
            std::swap(l1,l2);
        }
 return res     ;  
    }
};
