//Stack

//making push operation costly
class MyQueue {
public:
    stack<int> s1;
    stack<int> s2;
    MyQueue() {
        
    }
    
    void push(int x) {
        while(!s1.empty()){
            s2.push(s1.top());
            s1.pop();
        }
        s1.push(x);
        while(!s2.empty()){
            s1.push(s2.top());
            s2.pop();
        }
    }
    
    int pop() {
        int x=s1.top();
        s1.pop();
        return x;
    }
    
    int peek() {
        return s1.top();
    }
    
    bool empty() {
        return s1.empty();
    }
};


//making pop operation costly
class MyQueue {
public:
    stack<int> s1;
    stack<int> s2;
    MyQueue() {
        
    }
    
    void push(int x) {
        s1.push(x);
    }
    
    int pop() {
        if(s2.empty()){
            while(!s1.empty()){
                s2.push(s1.top());
                s1.pop();
            }          
        }
        int element=s2.top();
        s2.pop();
        return element;
    }
    
    int peek() {
       if(!s2.empty())
            return s2.top();
        else{
            while(s1.empty()==NULL){
                int t=s1.top();
                s1.pop();
                s2.push(t);
            }
            return s2.top();
        }
    }
    
    bool empty() {
        return (s1.empty() and s2.empty());
    }
};
